# retrieve the token data, returns an empty dictionary if not found
{{- $tokenSecret := (lookup "v1" "Secret" .Release.Namespace (print .Values.cluster "-registry-token")) | default dict }}
{{- $tokenSecretData := (get $tokenSecret "data") | default dict }}

# set $token to existing secret data, or if it does not exist, set it to the chart values or fallback to a random string.
{{- $tokenStr := (get $tokenSecretData "token" | b64dec ) | default "" }}
{{ if eq $tokenStr "" }}
{{- $tokenStr = (.Values.registry.token | default (randAlphaNum 10)) }}
{{ end }}
{{- $token := $tokenStr | nospace | b64enc }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.cluster }}-registry-token
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  token: {{ $token }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.cluster }}-plugin-registry
  namespace: {{ .Release.Namespace }}
  labels:
    app: traefikee
    release: {{ .Values.cluster }}
    {{- with .Values.registry.statefulSetLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- with .Values.registry.statefulSetAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ .Values.cluster }}-plugin-registry-svc
  replicas: 1
  selector:
    matchLabels:
      app: traefikee
      release: {{ .Values.cluster }}
      component: registry
  template:
    metadata:
      annotations:
        # This ensures that the registry pods will be rollout,
        # if the token for the plugin registry has changed since last deployment.
        checksum/config: {{ $token | sha256sum }}
        {{- with .Values.registry.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        app: traefikee
        release: {{ .Values.cluster }}
        component: registry
        {{- with .Values.registry.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: component
                      operator: In
                      values:
                        - registry
                topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: false
      initContainers:
        - name: wait-dns
          image: busybox:1.31.1
          command: ['sh', '-c', 'until nslookup -type=a {{ printf "%s-ctrl-svc.%s" .Values.cluster .Release.Namespace }}.svc.cluster.local; do echo waiting for published dns records; sleep 1; done;']
          resources:
            requests:
              memory: "10Mi"
              cpu: "100m"
            limits:
              memory: "100Mi"
              cpu: "1000m"
      containers:
        - name: {{ .Values.cluster }}-plugin-registry
          image: {{ template "traefikee-helm-chart.image-name" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PLUGIN_REGISTRY_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cluster }}-registry-token
                  key: token
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          ports:
            - containerPort: 80
              name: http
            - containerPort: 443
              name: https
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
            limits:
              memory: "4Gi"
              cpu: "1000m"
          volumeMounts:
            - name: {{ .Values.cluster }}-plugin-registry-data
              mountPath: "/var/lib/traefikee"
            - name: plugin-data
              mountPath: "/var/lib/plugins"
            - name: "join-token"
              mountPath: "/var/run/secrets"
          command:
            - "/traefikee"
            - "plugin-registry"
            - "--name=$(POD_NAME)"
            - "--plugindir=/var/lib/plugins"
            - "--token=$(PLUGIN_REGISTRY_TOKEN)"
            - "--discovery.dns.domain={{ .Values.cluster }}-ctrl-svc.$(POD_NAMESPACE)"
            - "--jointoken.file.path=/var/run/secrets"
            - "--log.level={{ (.Values.log).level | default "" }}"
            - "--log.filepath={{ (.Values.log).filepath | default "" }}"
            - "--log.format={{ (.Values.log).format | default "" }}"
      volumes:
        - name: {{ .Values.cluster }}-plugin-registry-data
          emptyDir: {}
        - name: "join-token"
          secret:
            secretName: {{ .Values.cluster }}-tokens
  volumeClaimTemplates:
    - metadata:
        name: plugin-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
